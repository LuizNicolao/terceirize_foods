/**
 * Valida√ß√µes espec√≠ficas para Usu√°rios
 * Implementa valida√ß√µes usando express-validator com sistema universal
 */

const { body, param, query } = require('express-validator');
const { 
  handleValidationErrors, 
  defaultCategoryMappings, 
  defaultCategoryNames, 
  defaultCategoryIcons 
} = require('../../middleware/validation');

// Configura√ß√£o espec√≠fica para usu√°rios
const userCategoryMapping = defaultCategoryMappings.usuarios;
const userCategoryNames = {
  ...defaultCategoryNames,
  personalInfo: 'Informa√ß√µes Pessoais',
  accessInfo: 'Informa√ß√µes de Acesso'
};
const userCategoryIcons = {
  ...defaultCategoryIcons,
  personalInfo: 'üë§',
  accessInfo: 'üîê'
};

// Valida√ß√µes comuns
const commonValidations = {
  // Valida√ß√£o de ID num√©rico
  id: param('id')
    .isInt({ min: 1 })
    .withMessage('ID deve ser um n√∫mero inteiro positivo'),

  // Valida√ß√£o de busca
  search: query('search')
    .optional()
    .isString()
    .trim()
    .isLength({ min: 1, max: 100 })
    .withMessage('Termo de busca deve ter entre 1 e 100 caracteres'),

  // Valida√ß√£o de pagina√ß√£o
  pagination: [
    query('page')
      .optional()
      .isInt({ min: 1 })
      .withMessage('P√°gina deve ser um n√∫mero inteiro positivo'),
    query('limit')
      .optional()
      .isInt({ min: 1, max: 100 })
      .withMessage('Limite deve ser um n√∫mero entre 1 e 100')
  ]
};

// Valida√ß√µes espec√≠ficas para usu√°rios
const userValidations = {
  create: [
    body('nome')
      .isLength({ min: 3, max: 100 })
      .withMessage('Nome deve ter entre 3 e 100 caracteres')
      .trim(),
    body('email')
      .custom((value) => {
        if (value && value.trim() !== '') {
          const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          if (!emailRegex.test(value)) {
            throw new Error('Email deve ser um email v√°lido');
          }
        }
        return true;
      })
      .withMessage('Email deve ser um email v√°lido'),
    body('senha')
      .isLength({ min: 6 })
      .withMessage('Senha deve ter pelo menos 6 caracteres'),
    body('nivel_de_acesso')
      .isIn(['I', 'II', 'III'])
      .withMessage('N√≠vel de acesso deve ser I, II ou III'),
    body('tipo_de_acesso')
      .isIn(['administrador', 'coordenador', 'administrativo', 'gerente', 'supervisor'])
      .withMessage('Tipo de acesso inv√°lido'),
    handleValidationErrors(userCategoryMapping, userCategoryNames, userCategoryIcons)
  ],

  update: [
    commonValidations.id,
    body('nome')
      .optional()
      .isLength({ min: 3, max: 100 })
      .withMessage('Nome deve ter entre 3 e 100 caracteres')
      .trim(),
    body('email')
      .optional()
      .custom((value) => {
        if (value && value.trim() !== '') {
          const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          if (!emailRegex.test(value)) {
            throw new Error('Email deve ser um email v√°lido');
          }
        }
        return true;
      })
      .withMessage('Email deve ser um email v√°lido'),
    body('nivel_de_acesso')
      .optional()
      .isIn(['I', 'II', 'III'])
      .withMessage('N√≠vel de acesso deve ser I, II ou III'),
    body('tipo_de_acesso')
      .optional()
      .isIn(['administrador', 'coordenador', 'administrativo', 'gerente', 'supervisor'])
      .withMessage('Tipo de acesso inv√°lido'),
    body('status')
      .optional()
      .isIn(['ativo', 'inativo'])
      .withMessage('Status deve ser ativo ou inativo'),
    handleValidationErrors(userCategoryMapping, userCategoryNames, userCategoryIcons)
  ],

  updatePassword: [
    commonValidations.id,
    body('senha_atual')
      .isLength({ min: 6 })
      .withMessage('Senha atual deve ter pelo menos 6 caracteres'),
    body('nova_senha')
      .isLength({ min: 6 })
      .withMessage('Nova senha deve ter pelo menos 6 caracteres'),
    body('confirmar_senha')
      .custom((value, { req }) => {
        if (value !== req.body.nova_senha) {
          throw new Error('Confirma√ß√£o de senha n√£o confere');
        }
        return true;
      })
      .withMessage('Confirma√ß√£o de senha n√£o confere'),
    handleValidationErrors(userCategoryMapping, userCategoryNames, userCategoryIcons)
  ]
};

module.exports = {
  userValidations,
  commonValidations
}; 